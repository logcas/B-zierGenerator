{"version":3,"sources":["js/node_modules/_browser-pack@6.1.0@browser-pack/_prelude.js","js/src/js/app.ts","js/src/js/bezier.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","bezier_1","canvas","document","querySelector","drawBtn","clearBtn","bezier","Bezier","onclick","x","layerX","y","layerY","add","draw","clear","config","this","points","movePoints","targetPoints","moveLineColor","drawTimes","scale","isDrawing","ctx","getContext","width","height","style","pointColor","lineColor","lineWidth","lineCap","radius","prototype","point","push","drawStaticPoint","clearRect","randomColor","animate","currentTimes","self","animation","calculateMovePoint","splice","drawCurve","window","requestAnimationFrame","beginPath","moveTo","strokeStyle","forEach","lineTo","stroke","arc","Math","PI","fillStyle","fill","percentage","temp","len","deltaX","deltaY","count","slice","_this","idx","floor","random"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,iECAA,IAAAK,EAAAX,EAAA,YAEIY,EAASC,SAASC,cAAc,QAChCC,EAAUF,SAASC,cAAc,SACjCE,EAAWH,SAASC,cAAc,UAElCG,EAAS,IAAIN,EAAAO,OAAON,GAExBA,EAAOO,QAAU,SAAU1B,GAEvB,IAAI2B,EAAY3B,EAAE4B,OACdC,EAAY7B,EAAE8B,OAElBN,EAAOO,IAAI,CAAEJ,EAACA,EAAEE,EAACA,KAIrBP,EAAQI,QAAU,WAEdF,EAAOQ,QAIXT,EAASG,QAAU,WAEfF,EAAOS,2GCLX,IAAAR,EAAA,WAeI,SAAAA,EAAYN,EAA2Be,GAEnC,GAXIC,KAAAC,OAAkB,GAClBD,KAAAE,WAAwB,GACxBF,KAAAG,aAAwB,GACxBH,KAAAI,cAA0B,GAE1BJ,KAAAK,UAAoB,IACpBL,KAAAM,MAAgB,EAChBN,KAAAO,WAAqB,EAIH,iBAAXvB,EAGP,MAAM,IAAIT,MAAM,kBAFhByB,KAAKhB,OAASA,EAKlBgB,KAAKQ,IAAMR,KAAKhB,OAAOyB,WAAW,MAG9BT,KAAKD,OADLA,GAGc,CACVW,MAAO,IACPC,OAAQ,IACRC,MAAO,CACHC,WAAY,OACZC,UAAW,UACXC,UAAW,EACXC,QAAS,QACTC,OAAQ,IAKpBjB,KAAKhB,OAAO0B,MAAQV,KAAKD,OAAOW,MAChCV,KAAKhB,OAAO2B,OAASX,KAAKD,OAAOY,OAgNzC,OA5MWrB,EAAA4B,UAAAtB,IAAP,SAAWuB,GACHnB,KAAKO,YACTP,KAAKC,OAAOmB,KAAKD,GACjBnB,KAAKqB,oBAIF/B,EAAA4B,UAAApB,MAAP,WACQE,KAAKO,YAECP,KAAKQ,IAEXc,UAAU,EAAG,EAAGtB,KAAKD,OAAOW,MAAOV,KAAKD,OAAOY,QAEnDX,KAAKC,OAAS,KAIXX,EAAA4B,UAAArB,KAAP,SAAYI,GAKR,GAJIA,IACAD,KAAKC,OAASA,KAGdD,KAAKO,WAAaP,KAAKC,OAAOrB,QAAU,GAA5C,CAEAoB,KAAKG,aAAe,GACpBH,KAAKE,WAAa,GAClBF,KAAKI,cAAgB,GAErBJ,KAAKM,MAAQN,KAAKC,OAAOrB,OAAS,EAElC,IAAK,IAAIX,EAAI,EAAGA,EAAI+B,KAAKM,QAASrC,EAC9B+B,KAAKI,cAAcgB,KAAKpB,KAAKuB,eAGvBvB,KAAKQ,IAEXc,UAAU,EAAG,EAAGtB,KAAKD,OAAOW,MAAOV,KAAKD,OAAOY,QAEnDX,KAAKO,WAAY,EAEjBP,KAAKwB,YAKDlC,EAAA4B,UAAAM,QAAR,WAEI,IAAIC,EAAuB,EACvBC,EAAe1B,KACfQ,EAAMR,KAAKQ,KAEf,SAASmB,IACL,GAAIF,GAAgBC,EAAKrB,UAQrB,OAPAqB,EAAKE,mBAAmB,GACxBF,EAAKxB,WAAW2B,OAAO,EAAGH,EAAKxB,WAAWtB,QAC1C4B,EAAIc,UAAU,EAAG,EAAGI,EAAK3B,OAAOW,MAAOgB,EAAK3B,OAAOY,QACnDe,EAAKL,kBACLK,EAAKI,YACLJ,EAAKvB,aAAa0B,OAAO,EAAGH,EAAKvB,aAAavB,aAC9C8C,EAAKnB,WAAY,GAGrBmB,EAAKL,kBACLK,EAAKE,mBAAmBH,EAAeC,EAAKrB,WAC5CqB,EAAKI,YACLJ,EAAKxB,WAAW2B,OAAO,EAAGH,EAAKxB,WAAWtB,UACxC6C,EACFM,OAAOC,sBAAsBL,GAGjCA,IAKIrC,EAAA4B,UAAAG,gBAAR,WAEI,GAA2B,IAAvBrB,KAAKC,OAAOrB,OAAhB,CAEA,IAAImB,EAAiBC,KAAKD,OACtBa,EAAeZ,KAAKD,OAAOa,MAC3BJ,EAAWR,KAAKQ,IAChBP,EAAkBD,KAAKC,OAE3BO,EAAIc,UAAU,EAAG,EAAGvB,EAAOW,MAAOX,EAAOY,QAEzCH,EAAIyB,YAEJzB,EAAI0B,OAAOjC,EAAO,GAAGT,EAAGS,EAAO,GAAGP,GAClCc,EAAI2B,YAAcvB,EAAME,UACxBN,EAAIO,UAAYH,EAAMG,UACtBP,EAAIQ,QAAUJ,EAAMI,QAGpBf,EAAOmC,QAAQ,SAAC3D,GAEZ+B,EAAI6B,OAAO5D,EAAEe,EAAGf,EAAEiB,GAClBc,EAAI8B,WAKRrC,EAAOmC,QAAQ,SAAC3D,GAEZ+B,EAAIyB,YACJzB,EAAI0B,OAAOzD,EAAEe,EAAGf,EAAEiB,GAClBc,EAAI+B,IAAI9D,EAAEe,EAAGf,EAAEiB,EAAGkB,EAAMK,OAAQ,EAAG,EAAIuB,KAAKC,IAAI,GAChDjC,EAAIkC,UAAY9B,EAAMC,WACtBL,EAAImC,WAOJrD,EAAA4B,UAAAU,mBAAR,SAA2BgB,GAKvB,IAHA,IAAIC,EAAgB,GAChB5C,EAAkBD,KAAKC,OAElBhC,EAAI,EAAG6E,EAAM7C,EAAOrB,OAAQX,EAAI6E,EAAM,IAAK7E,EAAG,CACnD,IAAI8E,EAAiB9C,EAAOhC,EAAI,GAAGuB,EAAIS,EAAOhC,GAAGuB,EAC7CwD,EAAiB/C,EAAOhC,EAAI,GAAGyB,EAAIO,EAAOhC,GAAGyB,EAEjDmD,EAAKzB,KAAK,CACN5B,EAAGuD,EAASH,EAAa3C,EAAOhC,GAAGuB,EACnCE,EAAGsD,EAASJ,EAAa3C,EAAOhC,GAAGyB,IAI3C,KAAuB,IAAhBmD,EAAKjE,QAAc,CAEtB,IAAIqE,EAAQJ,EAAKjE,OAEjB,IAASX,EAAI,EAAG6E,EAAMD,EAAKjE,OAAQX,EAAI6E,EAAM,IAAK7E,EAAG,CAC7C8E,EAAiBF,EAAK5E,EAAI,GAAGuB,EAAIqD,EAAK5E,GAAGuB,EACzCwD,EAAiBH,EAAK5E,EAAI,GAAGyB,EAAImD,EAAK5E,GAAGyB,EAE7CmD,EAAKzB,KAAK,CACN5B,EAAGuD,EAASH,EAAaC,EAAK5E,GAAGuB,EACjCE,EAAGsD,EAASJ,EAAaC,EAAK5E,GAAGyB,IAIzCM,KAAKE,WAAWkB,KAASyB,EAAKhB,OAAO,EAAGoB,GAAMC,SAI9B,IAAhBL,EAAKjE,QACLoB,KAAKG,aAAaiB,KAAKyB,EAAK,KAK5BvD,EAAA4B,UAAAY,UAAR,WAAA,IAAAqB,EAAAnD,KAEQQ,EAAMR,KAAKQ,IAGfR,KAAKE,WAAWkC,QAAQ,SAACnC,EAAiBmD,GAEtC5C,EAAIyB,YACJzB,EAAI0B,OAAOjC,EAAO,GAAGT,EAAGS,EAAO,GAAGP,GAClCc,EAAI2B,YAAcgB,EAAK/C,cAAcgD,GACrC5C,EAAIO,UAAY,EAGhBd,EAAOmC,QAAQ,SAAA3D,GACX+B,EAAI6B,OAAO5D,EAAEe,EAAGf,EAAEiB,GAClBc,EAAI8B,WAIRrC,EAAOmC,QAAQ,SAAA3D,GACX+B,EAAIyB,YACJzB,EAAIkC,UAAYS,EAAK/C,cAAcgD,GACnC5C,EAAI+B,IAAI9D,EAAEe,EAAGf,EAAEiB,EAAGyD,EAAKpD,OAAOa,MAAMK,OAAQ,EAAG,EAAIuB,KAAKC,IAAI,GAC5DjC,EAAImC,WAMZnC,EAAIyB,YACJzB,EAAI0B,OAAOlC,KAAKG,aAAa,GAAGX,EAAGQ,KAAKG,aAAa,GAAGT,GACxDc,EAAI2B,YAAc,MAClB3B,EAAIO,UAAY,EAChBf,KAAKG,aAAaiC,QAAQ,SAAA3D,GACtB+B,EAAI6B,OAAO5D,EAAEe,EAAGf,EAAEiB,GAClBc,EAAI8B,YAMJhD,EAAA4B,UAAAK,YAAR,WAKI,MAAO,QAJSiB,KAAKa,MAAsB,IAAhBb,KAAKc,UAIhB,IAHAd,KAAKa,MAAsB,IAAhBb,KAAKc,UAGX,IAFLd,KAAKa,MAAsB,IAAhBb,KAAKc,UAEN,SAGlChE,EA1PA,GAAaZ,EAAAY,OAAAA","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { Bezier } from './bezier';\r\n\r\nlet canvas = document.querySelector('#app') as HTMLCanvasElement,\r\n    drawBtn = document.querySelector('#draw') as HTMLButtonElement,\r\n    clearBtn = document.querySelector('#clear') as HTMLButtonElement;\r\n\r\nlet bezier = new Bezier(canvas);\r\n\r\ncanvas.onclick = function (e): void {\r\n\r\n    let x: number = e.layerX,\r\n        y: number = e.layerY;\r\n\r\n    bezier.add({ x, y });\r\n\r\n}\r\n\r\ndrawBtn.onclick = function (): void {\r\n\r\n    bezier.draw();\r\n\r\n}\r\n\r\nclearBtn.onclick = function (): void {\r\n\r\n    bezier.clear();\r\n\r\n}\r\n","\r\nexport interface Point {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport interface Style {\r\n    pointColor: string,\r\n    lineColor: string,\r\n    lineWidth: number,\r\n    lineCap: string,\r\n    radius: number\r\n}\r\n\r\nexport interface Config {\r\n    width: number;\r\n    height: number;\r\n    style: Style;\r\n}\r\n\r\nexport class Bezier {\r\n\r\n    private canvas: HTMLCanvasElement | null;\r\n    private ctx: CanvasRenderingContext2D | null;\r\n    private config: Config;\r\n\r\n    private points: Point[] = [];\r\n    private movePoints: Point[][] = [];\r\n    private targetPoints: Point[] = [];\r\n    private moveLineColor: string[] = [];\r\n\r\n    private drawTimes: number = 100;\r\n    private scale: number = 0;\r\n    private isDrawing: boolean = false;\r\n\r\n    constructor(canvas: HTMLCanvasElement, config?: Config) {\r\n\r\n        if (typeof canvas === 'object') {\r\n            this.canvas = canvas;\r\n        } else {\r\n            throw new Error(\"canvas is null\");\r\n        }\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        if (config) {\r\n            this.config = config\r\n        } else {\r\n            this.config = {\r\n                width: 600,\r\n                height: 500,\r\n                style: {\r\n                    pointColor: '#000',\r\n                    lineColor: '#DCDCDC',\r\n                    lineWidth: 5,\r\n                    lineCap: 'round',\r\n                    radius: 5\r\n                },\r\n            };\r\n        }\r\n\r\n        this.canvas.width = this.config.width;\r\n        this.canvas.height = this.config.height;\r\n    }\r\n\r\n    // 逐个点添加\r\n    public add(point: Point): void {\r\n        if (this.isDrawing) return;\r\n        this.points.push(point);\r\n        this.drawStaticPoint();\r\n    }\r\n\r\n    // 清除画布和点\r\n    public clear(): void {\r\n        if (this.isDrawing) return;\r\n\r\n        let ctx = this.ctx as CanvasRenderingContext2D;\r\n\r\n        ctx.clearRect(0, 0, this.config.width, this.config.height);\r\n\r\n        this.points = [];\r\n    }\r\n\r\n    // 绘制的公共方法\r\n    public draw(points?: Point[]): void {\r\n        if (points) {\r\n            this.points = points;\r\n        }\r\n\r\n        if (this.isDrawing || this.points.length <= 1) return;\r\n\r\n        this.targetPoints = [];\r\n        this.movePoints = [];\r\n        this.moveLineColor = [];\r\n\r\n        this.scale = this.points.length - 1;\r\n\r\n        for (let i = 0; i < this.scale; ++i) {\r\n            this.moveLineColor.push(this.randomColor());\r\n        }\r\n\r\n        let ctx = this.ctx as CanvasRenderingContext2D;\r\n\r\n        ctx.clearRect(0, 0, this.config.width, this.config.height);\r\n\r\n        this.isDrawing = true;\r\n\r\n        this.animate();\r\n\r\n    }\r\n\r\n    // 绘制动画\r\n    private animate(): void {\r\n\r\n        let currentTimes: number = 0,\r\n            self: Bezier = this,\r\n            ctx = this.ctx as CanvasRenderingContext2D;\r\n\r\n        function animation(): void {\r\n            if (currentTimes >= self.drawTimes) {\r\n                self.calculateMovePoint(1);\r\n                self.movePoints.splice(0, self.movePoints.length);\r\n                ctx.clearRect(0, 0, self.config.width, self.config.height);\r\n                self.drawStaticPoint();\r\n                self.drawCurve();\r\n                self.targetPoints.splice(0, self.targetPoints.length);\r\n                self.isDrawing = false;\r\n                return;\r\n            }\r\n            self.drawStaticPoint();\r\n            self.calculateMovePoint(currentTimes / self.drawTimes);\r\n            self.drawCurve();\r\n            self.movePoints.splice(0, self.movePoints.length);\r\n            ++currentTimes;\r\n            window.requestAnimationFrame(animation);\r\n        }\r\n\r\n        animation();\r\n\r\n    }\r\n\r\n    // 绘制固定点和连线\r\n    private drawStaticPoint(): void {\r\n\r\n        if (this.points.length === 0) return;\r\n\r\n        let config: Config = this.config,\r\n            style: Style = this.config.style,\r\n            ctx: any = this.ctx,\r\n            points: Point[] = this.points;\r\n\r\n        ctx.clearRect(0, 0, config.width, config.height);\r\n\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        ctx.strokeStyle = style.lineColor;\r\n        ctx.lineWidth = style.lineWidth;\r\n        ctx.lineCap = style.lineCap;\r\n\r\n        // 绘制线\r\n        points.forEach((p: Point) => {\r\n\r\n            ctx.lineTo(p.x, p.y);\r\n            ctx.stroke();\r\n\r\n        });\r\n\r\n        // 绘制点\r\n        points.forEach((p: Point) => {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(p.x, p.y);\r\n            ctx.arc(p.x, p.y, style.radius, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = style.pointColor;\r\n            ctx.fill();\r\n\r\n        });\r\n\r\n    }\r\n\r\n    // 计算动点新坐标\r\n    private calculateMovePoint(percentage: number): void {\r\n\r\n        let temp: Point[] = [],\r\n            points: Point[] = this.points;\r\n\r\n        for (let i = 0, len = points.length; i < len - 1; ++i) {\r\n            let deltaX: number = points[i + 1].x - points[i].x,\r\n                deltaY: number = points[i + 1].y - points[i].y;\r\n\r\n            temp.push({\r\n                x: deltaX * percentage + points[i].x,\r\n                y: deltaY * percentage + points[i].y,\r\n            });\r\n        }\r\n\r\n        while (temp.length !== 1) {\r\n\r\n            let count = temp.length;\r\n\r\n            for (let i = 0, len = temp.length; i < len - 1; ++i) {\r\n                let deltaX: number = temp[i + 1].x - temp[i].x,\r\n                    deltaY: number = temp[i + 1].y - temp[i].y;\r\n\r\n                temp.push({\r\n                    x: deltaX * percentage + temp[i].x,\r\n                    y: deltaY * percentage + temp[i].y,\r\n                });\r\n            }\r\n\r\n            this.movePoints.push([...temp.splice(0, count)]);\r\n\r\n        }\r\n\r\n        if (temp.length === 1) {\r\n            this.targetPoints.push(temp[0]);\r\n        }\r\n    }\r\n\r\n    // 绘制\r\n    private drawCurve(): void {\r\n\r\n        let ctx = this.ctx as CanvasRenderingContext2D;\r\n\r\n        // 绘制动点的直线\r\n        this.movePoints.forEach((points: Point[], idx: number) => {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(points[0].x, points[0].y);\r\n            ctx.strokeStyle = this.moveLineColor[idx];\r\n            ctx.lineWidth = 3;\r\n\r\n            // 绘制连线\r\n            points.forEach(p => {\r\n                ctx.lineTo(p.x, p.y);\r\n                ctx.stroke();\r\n            });\r\n\r\n            // 绘制端点\r\n            points.forEach(p => {\r\n                ctx.beginPath();\r\n                ctx.fillStyle = this.moveLineColor[idx];\r\n                ctx.arc(p.x, p.y, this.config.style.radius, 0, 2 * Math.PI, false);\r\n                ctx.fill();\r\n            });\r\n\r\n        });\r\n\r\n        // 绘制贝塞尔曲线\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.targetPoints[0].x, this.targetPoints[0].y);\r\n        ctx.strokeStyle = 'red';\r\n        ctx.lineWidth = 2;\r\n        this.targetPoints.forEach(p => {\r\n            ctx.lineTo(p.x, p.y);\r\n            ctx.stroke();\r\n        });\r\n\r\n    }\r\n\r\n    // 随机生成颜色\r\n    private randomColor(): string {\r\n        let r: number = Math.floor(Math.random() * 256),\r\n            g: number = Math.floor(Math.random() * 256),\r\n            b: number = Math.floor(Math.random() * 256);\r\n\r\n        return `rgba(${r},${g},${b},0.5)`;\r\n    }\r\n\r\n}\r\n"]}