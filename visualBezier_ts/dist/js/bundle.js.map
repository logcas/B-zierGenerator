{"version":3,"sources":["js/node_modules/_browser-pack@6.1.0@browser-pack/_prelude.js","js/src/js/app.ts","js/src/js/bezier.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","bezier_1","canvas","document","querySelector","drawBtn","clearBtn","playground","curveCanvas","bezier","Bezier","onclick","x","layerX","y","layerY","add","draw","clear","config","this","points","movePoints","startPoint","curveNextPoint","moveLineColor","drawTimes","scale","isDrawing","ctx","getContext","curveCtx","width","height","style","pointColor","lineColor","lineWidth","lineCap","radius","prototype","point","push","drawStaticPoint","clearRect","console","log","randomColor","animate","currentTimes","self","animation","calculateMovePoint","splice","drawCurve","startTime","Date","getTime","delta","window","requestAnimationFrame","beginPath","moveTo","strokeStyle","forEach","lineTo","stroke","arc","Math","PI","fillStyle","fill","percentage","temp","len","deltaX","deltaY","count","slice","_this","idx","floor","random"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { Bezier } from './bezier';\r\n\r\nlet canvas = document.querySelector('#app') as HTMLCanvasElement,\r\n    drawBtn = document.querySelector('#draw') as HTMLButtonElement,\r\n    clearBtn = document.querySelector('#clear') as HTMLButtonElement,\r\n    playground = document.querySelector('#playground') as HTMLDivElement,\r\n    curveCanvas = document.querySelector('#curve') as HTMLCanvasElement;\r\n\r\nlet bezier = new Bezier(canvas, curveCanvas);\r\n\r\nplayground.onclick = function (e): void {\r\n    let x: number = e.layerX,\r\n        y: number = e.layerY;\r\n\r\n    bezier.add({ x, y });\r\n}\r\n\r\ndrawBtn.onclick = function (): void {\r\n    bezier.draw();\r\n}\r\n\r\nclearBtn.onclick = function (): void {\r\n    bezier.clear();\r\n}\r\n","\r\nexport interface Point {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport interface Style {\r\n    pointColor: string,\r\n    lineColor: string,\r\n    lineWidth: number,\r\n    lineCap: string,\r\n    radius: number\r\n}\r\n\r\nexport interface Config {\r\n    width: number;\r\n    height: number;\r\n    style: Style;\r\n}\r\n\r\nexport class Bezier {\r\n\r\n    private curveCanvas: HTMLCanvasElement | null;\r\n    private curveCtx: CanvasRenderingContext2D | null;\r\n\r\n    private canvas: HTMLCanvasElement | null;\r\n    private ctx: CanvasRenderingContext2D | null;\r\n    private config: Config;\r\n\r\n    private points: Point[] = [];\r\n    private movePoints: Point[][] = [];\r\n    private startPoint: Point = { x: 0, y: 0 };\r\n    private curveNextPoint: Point = { x: 0, y: 0 };\r\n    private moveLineColor: string[] = [];\r\n\r\n    private drawTimes: number = 200;\r\n    private scale: number = 0;\r\n    private isDrawing: boolean = false;\r\n\r\n    constructor(canvas: HTMLCanvasElement, curveCanvas: HTMLCanvasElement, config?: Config) {\r\n\r\n        if (canvas !== null && curveCanvas !== null) {\r\n            this.canvas = canvas;\r\n            this.curveCanvas = curveCanvas;\r\n        } else {\r\n            throw new Error(\"canvas is null\");\r\n        }\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.curveCtx = this.curveCanvas.getContext('2d');\r\n\r\n        if (config) {\r\n            this.config = config\r\n        } else {\r\n            this.config = {\r\n                width: 600,\r\n                height: 500,\r\n                style: {\r\n                    pointColor: '#000',\r\n                    lineColor: '#DCDCDC',\r\n                    lineWidth: 5,\r\n                    lineCap: 'round',\r\n                    radius: 5\r\n                },\r\n            };\r\n        }\r\n\r\n        this.canvas.width = this.config.width;\r\n        this.canvas.height = this.config.height;\r\n        this.curveCanvas.width = this.config.width;\r\n        this.curveCanvas.height = this.config.height;\r\n\r\n    }\r\n\r\n    // 逐个点添加\r\n    public add(point: Point): void {\r\n        if (this.isDrawing) return;\r\n        this.points.push(point);\r\n        this.drawStaticPoint();\r\n    }\r\n\r\n    // 清除画布和点\r\n    public clear(): void {\r\n        if (this.isDrawing) return;\r\n\r\n        let ctx = this.ctx as CanvasRenderingContext2D,\r\n            curveCtx = this.curveCtx as CanvasRenderingContext2D;\r\n\r\n        ctx.clearRect(0, 0, this.config.width, this.config.height);\r\n        curveCtx.clearRect(0, 0, this.config.width, this.config.height);\r\n\r\n        this.points = [];\r\n    }\r\n\r\n    // 绘制的公共方法\r\n    public draw(points?: Point[]): void {\r\n        if (points) {\r\n            this.points = points;\r\n        }\r\n\r\n        if (this.isDrawing || this.points.length <= 1) return;\r\n\r\n        console.log('draw start:');\r\n        this.startPoint = this.points[0];\r\n        console.log(this.startPoint);\r\n        this.movePoints = [];\r\n        this.moveLineColor = [];\r\n\r\n        this.scale = this.points.length - 1;\r\n\r\n        for (let i = 0; i < this.scale; ++i) {\r\n            this.moveLineColor.push(this.randomColor());\r\n        }\r\n\r\n        let ctx = this.ctx as CanvasRenderingContext2D,\r\n            curveCtx = this.curveCtx as CanvasRenderingContext2D;\r\n\r\n        ctx.clearRect(0, 0, this.config.width, this.config.height);\r\n        curveCtx.clearRect(0, 0, this.config.width, this.config.height);\r\n\r\n        this.isDrawing = true;\r\n\r\n        this.animate();\r\n\r\n    }\r\n\r\n    // 绘制动画\r\n    private animate(): void {\r\n\r\n        let currentTimes: number = 0,\r\n            self: Bezier = this,\r\n            ctx = this.ctx as CanvasRenderingContext2D;\r\n\r\n        function animation(): void {\r\n            if (currentTimes >= self.drawTimes) {\r\n                self.calculateMovePoint(1);\r\n                self.movePoints.splice(0, self.movePoints.length);\r\n                ctx.clearRect(0, 0, self.config.width, self.config.height);\r\n                self.drawStaticPoint();\r\n                self.drawCurve();\r\n                self.startPoint = { x: 0, y: 0 };\r\n                self.curveNextPoint = { x: 0, y: 0 };\r\n                self.isDrawing = false;\r\n                return;\r\n            }\r\n            self.drawStaticPoint();\r\n            let startTime = new Date().getTime();\r\n            self.calculateMovePoint(currentTimes / self.drawTimes);\r\n            let delta = new Date().getTime() - startTime;\r\n            console.log(`calculate: ${delta} ms`);\r\n            startTime = new Date().getTime();\r\n            self.drawCurve();\r\n            delta = new Date().getTime() - startTime;\r\n            console.log(`render: ${delta} ms`);\r\n            self.movePoints.splice(0, self.movePoints.length);\r\n            ++currentTimes;\r\n            window.requestAnimationFrame(animation);\r\n        }\r\n\r\n        animation();\r\n\r\n    }\r\n\r\n    // 绘制固定点和连线\r\n    private drawStaticPoint(): void {\r\n\r\n        if (this.points.length === 0) return;\r\n\r\n        let config: Config = this.config,\r\n            style: Style = this.config.style,\r\n            ctx: any = this.ctx,\r\n            points: Point[] = this.points;\r\n\r\n        ctx.clearRect(0, 0, config.width, config.height);\r\n\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        ctx.strokeStyle = style.lineColor;\r\n        ctx.lineWidth = style.lineWidth;\r\n        ctx.lineCap = style.lineCap;\r\n\r\n        // 绘制线\r\n        points.forEach((p: Point) => {\r\n\r\n            ctx.lineTo(p.x, p.y);\r\n            ctx.stroke();\r\n\r\n        });\r\n\r\n        // 绘制点\r\n        points.forEach((p: Point) => {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(p.x, p.y);\r\n            ctx.arc(p.x, p.y, style.radius, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = style.pointColor;\r\n            ctx.fill();\r\n\r\n        });\r\n\r\n    }\r\n\r\n    // 计算动点新坐标\r\n    private calculateMovePoint(percentage: number): void {\r\n\r\n        let temp: Point[] = [],\r\n            points: Point[] = this.points;\r\n\r\n        for (let i = 0, len = points.length; i < len - 1; ++i) {\r\n            let deltaX: number = points[i + 1].x - points[i].x,\r\n                deltaY: number = points[i + 1].y - points[i].y;\r\n\r\n            temp.push({\r\n                x: deltaX * percentage + points[i].x,\r\n                y: deltaY * percentage + points[i].y,\r\n            });\r\n        }\r\n\r\n        while (temp.length !== 1) {\r\n\r\n            let count = temp.length;\r\n\r\n            for (let i = 0, len = temp.length; i < len - 1; ++i) {\r\n                let deltaX: number = temp[i + 1].x - temp[i].x,\r\n                    deltaY: number = temp[i + 1].y - temp[i].y;\r\n\r\n                temp.push({\r\n                    x: deltaX * percentage + temp[i].x,\r\n                    y: deltaY * percentage + temp[i].y,\r\n                });\r\n            }\r\n\r\n            this.movePoints.push([...temp.splice(0, count)]);\r\n\r\n        }\r\n\r\n        if (temp.length === 1) {\r\n            console.log('your startpoint:');\r\n            console.log(this.startPoint);\r\n            if (this.curveNextPoint.x !== 0 && this.curveNextPoint.y !== 0) {\r\n                this.startPoint = this.curveNextPoint;\r\n            }\r\n            this.curveNextPoint = temp[0];\r\n        }\r\n    }\r\n\r\n    // 绘制\r\n    private drawCurve(): void {\r\n\r\n        let ctx = this.ctx as CanvasRenderingContext2D,\r\n            curveCtx = this.curveCtx as CanvasRenderingContext2D;\r\n\r\n        ctx.lineWidth = 3;\r\n\r\n        // 绘制动点的直线\r\n        this.movePoints.forEach((points: Point[], idx: number) => {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(points[0].x, points[0].y);\r\n            ctx.strokeStyle = this.moveLineColor[idx];\r\n\r\n            // 绘制连线\r\n            points.forEach(p => {\r\n                ctx.lineTo(p.x, p.y);\r\n                ctx.stroke();\r\n            });\r\n\r\n            // 绘制端点\r\n            \r\n            points.forEach(p => {\r\n                ctx.beginPath();\r\n                ctx.fillStyle = this.moveLineColor[idx];\r\n                ctx.arc(p.x, p.y, this.config.style.radius, 0, 2 * Math.PI, false);\r\n                ctx.fill();\r\n            });\r\n            \r\n\r\n        });\r\n\r\n        // 绘制贝塞尔曲线\r\n        curveCtx.beginPath();\r\n        console.log('draw agian:');\r\n        console.log(this.startPoint);\r\n        curveCtx.moveTo(this.startPoint.x, this.startPoint.y);\r\n        curveCtx.strokeStyle = 'red'; // !TODO 优化\r\n        curveCtx.lineWidth = 2;\r\n        curveCtx.lineTo(this.curveNextPoint.x, this.curveNextPoint.y);\r\n        curveCtx.stroke();\r\n    }\r\n\r\n    // 随机生成颜色\r\n    private randomColor(): string {\r\n        let r: number = Math.floor(Math.random() * 256),\r\n            g: number = Math.floor(Math.random() * 256),\r\n            b: number = Math.floor(Math.random() * 256);\r\n\r\n        return `rgba(${r},${g},${b},0.5)`;\r\n    }\r\n\r\n}\r\n"]}